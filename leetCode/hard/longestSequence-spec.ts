// https://leetcode.com/problems/longest-consecutive-sequence/
// Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

// Example 1:

// Input: nums = [100,4,200,1,3,2]
// Output: 4
// Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
// Example 2:

// Input: nums = [0,3,7,2,5,8,4,6,0,1]
// Output: 9
import * as expect from 'expect.js';
import {
  Bound,
  findLongestSequenceInArray,
  upperLowerBoundMatcher,
} from './longestSequence';

describe.only('findLongestSequenceInArray()', () => {
  it('validate the empty case', () => {
    expect(findLongestSequenceInArray([])).to.eql(0);
  })

  it('validate the single case', () => {
    expect(findLongestSequenceInArray([1])).to.eql(1);
  })

  it('validate the simple case', () => {
    expect(findLongestSequenceInArray([1, 2, 3])).to.eql(3);
  })

  it('validate the base case', () => {
    expect(findLongestSequenceInArray([100, 4, 200, 1, 3, 2])).to.eql(4);
  })

  it('validate a simple number array case', () => {
    expect(findLongestSequenceInArray([0, 3, 7, 2, 5, 8, 4, 6, 0, 1])).to.eql(9);
  })

  it('1000 sequence for fun', () => {
    // const item = []
    // for (let i = 0; i < 1000; i++) {
    //   item.push(Math.floor(Math.random()*1000))
    // }
    const funSequence = [20, 491, 176, 890, 847, 561, 165, 653, 749, 389, 983, 438, 210, 137, 659, 841, 8, 855, 715, 608, 625, 192, 555, 644, 995, 772, 937, 735, 582, 267, 596, 526, 928, 219, 56, 976, 105, 266, 862, 266, 702, 849, 848, 958, 207, 738, 560, 966,
      904, 292, 819, 191, 797, 725, 538, 22, 410, 11, 85, 830, 533, 744, 157, 403, 773, 709, 408, 793, 187, 463, 695, 246, 452, 479, 196, 300, 296, 319, 998, 686, 32, 268, 638, 1, 437, 401, 725, 193, 570, 517, 73, 974, 614, 407, 595, 396, 136,
      66, 825, 569, 403, 424, 866, 5, 864, 509, 153, 181, 423, 880, 654, 943, 884, 364, 921, 923, 294, 921, 196, 548, 453, 168, 481, 422, 26, 880, 86, 324, 689, 388, 863, 813, 965, 90, 732, 557, 742, 625, 500, 689, 775, 212, 134, 831, 968, 76,
      418, 863, 870, 239, 408, 27, 50, 942, 813, 4, 12, 630, 475, 923, 712, 865, 869, 176, 119, 96, 797, 786, 217, 133, 520, 467, 887, 979, 415, 928, 54, 927, 736, 915, 348, 964, 606, 284, 453, 342, 101, 850, 445, 921, 432, 74, 377, 499, 485,
      889, 537, 591, 90, 761, 192, 943, 147, 942, 371, 811, 721, 70, 906, 989, 21, 183, 548, 864, 171, 824, 557, 911, 198, 439, 719, 997, 285, 966, 332, 822, 377, 734, 498, 932, 689, 262, 606, 983, 435, 580, 91, 621, 114, 652, 754, 376, 316, 200,
      699, 330, 426, 874, 978, 195, 659, 725, 872, 400, 703, 13, 129, 903, 436, 248, 978, 72, 949, 769, 628, 285, 691, 199, 62, 886, 551, 201, 352, 415, 181, 816, 362, 213, 965, 105, 431, 738, 523, 231, 471, 133, 119, 658, 26, 992, 463, 767, 166,
      182, 96, 774, 727, 289, 104, 677, 31, 451, 61, 919, 323, 505, 242, 204, 435, 699, 884, 70, 598, 183, 223, 175, 390, 518, 764, 925, 4, 679, 954, 992, 627, 21, 183, 351, 336, 786, 54, 497, 233, 595, 199, 747, 882, 184, 795, 416, 425, 147, 737,
      122, 965, 471, 632, 327, 167, 845, 58, 699, 805, 938, 911, 758, 947, 744, 256, 954, 705, 228, 329, 565, 540, 520, 257, 632, 271, 330, 838, 994, 498, 394, 629, 973, 99, 294, 632, 261, 917, 563, 471, 102, 190, 308, 525, 243,
      914, 22, 961, 832, 225, 151, 892, 819, 576, 842, 292, 332, 276, 23, 373, 255, 88, 293, 677, 702, 412, 983, 763, 236, 918, 462, 608, 676, 869, 446, 900, 678, 539, 750, 132, 811, 701, 417, 19, 200, 281, 124, 441, 10, 925, 138, 545, 155, 561, 775,
      416, 993, 352, 881, 744, 558, 9, 955, 608, 415, 173, 143, 83, 381, 170, 905, 281, 599, 494, 745, 321, 755, 202, 53, 261, 894, 292, 977, 779, 810, 560, 981, 964, 277, 217, 517, 588, 987, 513, 510, 912, 931, 360, 258, 55, 293, 195, 413, 617, 749,
      768, 47, 365, 740, 817, 699, 890, 937, 639, 868, 775, 11, 387, 126, 302, 743, 632, 707, 182, 786, 980, 130, 193, 67, 355, 547, 208, 549, 524, 541, 36, 41, 639, 734, 819, 221, 569, 578, 517, 143, 335, 335, 554, 358, 283, 940, 88, 349, 392, 319,
      99, 975, 441, 807, 741, 383, 416, 118, 382, 19, 643, 620, 363, 948, 124, 971, 647, 774, 323, 643, 994, 147, 854, 147, 126, 116, 333, 113, 11, 948, 734, 235, 353, 823, 708, 671, 216, 79, 986, 270, 353, 783, 799, 843, 787, 233, 56, 703, 872, 317,
      630, 832, 682, 659, 143, 612, 785, 722, 881, 772, 522, 987, 657, 710, 18, 941, 150, 346, 76, 30, 530, 968, 13, 31, 186, 568, 915, 212, 168, 789, 213, 662, 170, 739, 360, 345, 112, 334, 88, 496, 640, 109, 307, 596, 349, 689, 130, 874, 249, 955,
      588, 35, 465, 39, 139, 38, 93, 782, 775, 665, 398, 740, 575, 204, 428, 760, 570, 210, 237, 650, 58, 740, 701, 300, 434, 151, 729, 620, 277, 382, 564, 863, 398, 611, 956, 326, 425, 287, 475, 730, 438, 454, 600, 408, 461, 638, 381, 719, 306, 412,
      780, 454, 722, 978, 807, 114, 502, 612, 342, 95, 948, 78, 895, 560, 236, 445, 540, 909, 159, 893, 559, 147, 796, 156, 658, 861, 768, 898, 351, 42, 126, 631, 948, 919, 9, 565, 279, 77, 850, 175, 667, 770, 266, 990, 343, 48, 491, 683, 165, 516, 647,
      448, 654, 692, 86, 327, 709, 13, 394, 732, 919, 583, 876, 609, 384, 914, 27, 870, 945, 381, 923, 844, 247, 407, 593, 453, 449, 22, 349, 688, 757, 11, 868, 560, 505, 817, 412, 719, 215, 246, 324, 858, 887, 161, 633, 31, 838, 594, 136, 440, 517, 463,
      850, 193, 472, 889, 255, 489, 862, 511, 959, 269, 191, 687, 165, 313, 307, 422, 818, 984, 561, 696, 157, 709, 86, 968, 848, 676, 216, 732, 183, 81, 27, 436, 275, 843, 353, 659, 138, 207, 571, 739, 632, 593, 500, 951, 826, 829, 808, 773, 127, 865,
      923, 185, 627, 946, 356, 204, 489, 808, 201, 490, 154, 318, 527, 707, 790, 487, 845, 615, 436, 972, 294, 309, 517, 810, 701, 905, 910, 506, 784, 362, 921, 942, 876, 422, 562, 580, 474, 911, 679, 567, 636, 462, 456, 469, 577, 383, 786, 695, 56, 249,
      139, 598, 593, 107, 686, 436, 478, 359, 578, 16, 941, 224, 276, 994, 608, 619, 490, 920, 227, 106, 767, 198, 51, 10, 706, 608, 97, 56, 322, 822, 464, 594, 278, 962, 851, 9, 461, 266, 908, 106, 609, 498, 450, 250, 294, 460, 986, 599, 655, 2, 882, 270,
      339, 120, 771, 336, 186, 689, 69, 917, 980, 899, 993, 103, 291, 842, 94, 439, 463, 70, 932, 285, 573, 328, 383, 631, 483, 871, 722, 952, 72, 651, 418, 562, 322, 560, 579, 552, 42, 921, 847, 996, 294, 89, 484, 754, 835, 23, 491, 239, 131, 225, 727, 118,
      344, 628, 683, 67, 956, 661
    ];
    expect(findLongestSequenceInArray(funSequence)).to.eql(12);
    expect(findLongestSequenceInArray(funSequence.sort())).to.eql(12);
  })

  describe('upperLowerBoundMatcher()', () => {
    it('validate we can add to a sequence on low value', () => {
      const boundList: Bound[] = [[3, 5]];
      const value = 2;
      upperLowerBoundMatcher({ boundList, value, maxSequence: 0 });
      expect(boundList).to.eql([[2, 5]])
    })

    it('validate we can add to a sequence on high value', () => {
      const boundList: Bound[] = [[3, 5]];
      const value = 6;
      upperLowerBoundMatcher({ boundList, value, maxSequence: 0 });
      expect(boundList).to.eql([[3, 6]])
    })

    it('validate we can skip if inside a known sequence', () => {
      const boundList: Bound[] = [[3, 5]];
      const value = 4;
      upperLowerBoundMatcher({ boundList, value, maxSequence: 0 });
      expect(boundList).to.eql([[3, 5]])
    })

    it('add to a new sequence', () => {
      const boundList: Bound[] = [[3, 5]];
      const value = 7;
      upperLowerBoundMatcher({ boundList, value, maxSequence: 0 });
      expect(boundList).to.eql([[3, 5], [7, 7]])
    })
  })
})

